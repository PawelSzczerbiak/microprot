# snakemake -s Snakefile_minimal -n

import yaml
import re
import sys
from glob import glob
from os import makedirs
from os.path import basename, splitext, exists
from shutil import copyfile

sys.path.append('/projects/microprot')
from microprot.scripts import split_search, process_fasta, \
                              snakemake_helpers, calculate_Neff


configfile: "config.yml"

# execute *before* any rules
# making it cluster friendly
try:
    config['inp_from'] = config['seq_no']
    config['inp_to'] = config['seq_no']
except KeyError:
    pass

# create output directories if they don't exist
for _out_dir_name in ['PDB', 'CM', 'AB', 'log', 'pkg']:
    _out_dir_path = '%s/%s' % (config['MICROPROT_OUT'], _out_dir_name)
    if not exists(_out_dir_path):
        makedirs(_out_dir_path)

SEQ_ids = snakemake_helpers.parse_inputs(inp_fp=config['inp_fp'],
                                         inp_from=config['inp_from'],
                                         inp_to=config['inp_to'],
                                         microprot_inp='%s/%s' % (config['MICROPROT_TEMP'],
                                                                  '/ZZ-sequences'),
                                         microprot_out=config['MICROPROT_OUT'])


def search_x(inp_0, out_0, params=None, dbs=None, n_cpu=4, log=None,
             match_exp="non_match", hh="hhsearch"):
    indir = snakemake_helpers.trim(inp_0, '/')
    outdir = snakemake_helpers.trim(out_0, '/')
    for _match in glob('%s/%s' % (indir, '*%s' % match_exp)):
        if snakemake_helpers.not_empty(_match):
            process_fasta.split_fasta(process_fasta.extract_sequences(
                                      _match), outdir=outdir)
    for hh_inp in glob('%s/%s' % (outdir, '*.fasta')):
        out_root = snakemake_helpers.trim(hh_inp, '.')
        if hh == 'hhsearch':
            shell('{config[TOOLS][hhsuite]}/hhsearch -i {hh_inp} \
                   {params} \
                   -cpu {n_cpu} \
                   -d {dbs} \
                   -o {out_root}.out \
                   -oa3m {out_root}.a3m 2>> {log}')
        elif hh == 'hhblits':
            shell('{config[TOOLS][hhsuite]}/hhblits -i {hh_inp} \
                   {params} \
                   -cpu {n_cpu} \
                   -d {dbs} \
                   -o {out_root}.out \
                   -oa3m {out_root}.a3m 2>> {log}')

    shell('touch {out_0}')


def split_x(inp_0, out_0, step="NA", version=config['VERSION'],
            frag_len=None,
            p_val=None,
            e_val=None,
            prob=None,
            log=None):
    inpdir = snakemake_helpers.trim(inp_0, '/')
    _not_empty_list = []
    for fasta_inp in glob('%s/%s' % (inpdir, '*.fasta')):
        hh_inp = re.sub('.fasta$', '.out', fasta_inp)
        outname = snakemake_helpers.trim(hh_inp, '.').split('/')[-1]
        outpath = snakemake_helpers.trim(out_0, '/')

        with open('%s.log' % log, 'a') as _log:
            _log.write('%s\n\thh_inp=%s\n\tfasta_inp=%s\n'
                       '\t\tstep=%s\tfrag_len=%s\tp_val=%s\t'
                       'e_val=%s\tprob=%s\n' % (step, hh_inp, fasta_inp,
                                                step, frag_len, p_val,
                                                e_val, prob))
        split_search.mask_sequence(hh_inp, fasta_inp,
                                   subsequences_fp='%s/%s' % (outpath,
                                                              outname),
                                   min_fragment_length=frag_len,
                                   max_evalue=e_val,
                                   min_prob=prob,
                                   max_pvalue=p_val
                                   )
        match = '%s/%s.match' % (outpath, outname)
        non_match = '%s/%s.non_match' % (outpath, outname)

        if snakemake_helpers.not_empty(match):
            snakemake_helpers.write_db(match, step=step, version=version,
                                       db_fp=log)
        if snakemake_helpers.not_empty(non_match):
            _not_empty_list.append(True)

    if any(_not_empty_list):
        shell('touch {out_0}')
    else:
        shell('echo "pass" > {out_0}')


def copy_out(source_dir='01-PDB', dest_dir='PDB', tempdir='/dev/null'):
    X_match = glob('%s/%s' % (tempdir, '%s%s' % (source_dir, '/*.match')))
    if len(X_match) > 0:
        X_match_names = [re.sub('.match', '', _match) for _match in X_match
                         if snakemake_helpers.not_empty(_match)]
        for _match in X_match_names:
            shell('rsync -rzq --min-size=1 {_match}.{{match,out,a3m}} \
                  {config[MICROPROT_OUT]}/{dest_dir}/ 2> /dev/null')


rule all:
    input:
        expand(config['MICROPROT_TEMP']+'/done.{seq}',
               seq=SEQ_ids)


rule search_split_PDB:
    input:
        config['MICROPROT_TEMP']+'/ZZ-sequences/{seq}.fasta'
    output:
        out = config['MICROPROT_TEMP']+'/{seq}/01-PDB/{seq}.out',
        a3m = config['MICROPROT_TEMP']+'/{seq}/01-PDB/{seq}.a3m',
        dummy = temp(config['MICROPROT_TEMP']+'/{seq}/01-PDB/{seq}')
    log:
        config['MICROPROT_TEMP']+'/{seq}/{seq}'
    threads: config['THREADS']
    run:
        shell('echo -e "SEARCH PDB\n----------" >> {log}.log; \
               {config[TOOLS][hhsuite]}/hhsearch -i {input} \
               {config[search_PDB][params]} \
               -cpu {config[THREADS]} \
               -d {config[search_PDB][DB]} \
               -o {output.out} \
               -oa3m {output.a3m} 2>> {log}.log')

        # produces output.match and output.non_match
        split_search.mask_sequence(output['out'], input[0],
                                   subsequences_fp=output['dummy'],
                                   min_prob=config['split_PDB']['params']['min_prob'],
                                   min_fragment_length=config['split_PDB']['params']['min_fragment_length'])
        match = '%s.match' % output['dummy']
        non_match = '%s.non_match' % output['dummy']

        if snakemake_helpers.not_empty(match):
            snakemake_helpers.write_db(match, step="PDB",
                                       version=config['VERSION'],
                                       db_fp=log[0])
        if snakemake_helpers.not_empty(non_match):
            shell('touch {output.dummy}')
        else:
            shell('echo "pass" > {output.dummy}')


rule search_split_CM:
    input:
        config['MICROPROT_TEMP']+'/{seq}/01-PDB/{seq}'
    output:
        temp(config['MICROPROT_TEMP']+'/{seq}/02-CM/{seq}')
    log:
        config['MICROPROT_TEMP']+'/{seq}/{seq}'
    threads: config['THREADS']
    run:
        if snakemake_helpers.not_empty(input[0]):
            shell('echo "pass" > {output}')
        else:
            shell('echo -e "SEARCH CM\n---------" >> {log}.log')
            logfile = '%s.log' % log[0]
            search_x(input[0], output[0],
                     params=config['search_CM']['params'],
                     n_cpu=config['THREADS'],
                     dbs=config['search_CM']['DB'],
                     log=logfile, hh='hhsearch',
                     match_exp='non_match')

        if snakemake_helpers.not_empty(output[0]):
            shell('echo "pass" > {output}')
        else:
            split_x(output[0], output[0],
                    step="CM",
                    frag_len=config['split_CM']['params']['min_fragment_length'],
                    e_val=config['split_CM']['params']['max_evalue'],
                    log=log[0])


rule search_split_Pfam:
    input:
        config['MICROPROT_TEMP']+'/{seq}/02-CM/{seq}'
    output:
        temp(config['MICROPROT_TEMP']+'/{seq}/03-Pfam/{seq}')
    log:
        config['MICROPROT_TEMP']+'/{seq}/{seq}'
    threads: config['THREADS']
    run:
        if snakemake_helpers.not_empty(input[0]):
            shell('echo "pass" > {output}')
        else:
            shell('echo -e "SEARCH PFAM\n-----------" >> {log}')
            logfile = '%s.log' % log[0]
            search_x(input[0], output[0],
                     params=config['search_Pfam']['params'],
                     n_cpu=config['THREADS'],
                     dbs=config['search_Pfam']['DB'],
                     log=log[0], hh='hhsearch',
                     match_exp='non_match')

        if snakemake_helpers.not_empty(output[0]):
            shell('echo "pass" > {output}')
        else:
            split_x(output[0], output[0],
                    step="Pfam",
                    frag_len=config['split_Pfam']['params']['min_fragment_length'],
                    e_val=config['split_Pfam']['params']['max_evalue'],
                    prob=config['split_Pfam']['params']['min_prob'],
                    log=log[0])


rule MSA_hhblits:
    input:
        config['MICROPROT_TEMP']+'/{seq}/03-Pfam/{seq}'
    output:
        temp(config['MICROPROT_TEMP']+'/{seq}/04-MSA_hhblits/{seq}')
    log:
        config['MICROPROT_TEMP']+'/{seq}/{seq}.log'
    threads: config['THREADS']
    run:
        """
        here, we process both `match` and `non_match` sequences
        Pfam is our "domain splitting" method
        """
        shell('echo -e "MSA HHBLITS\n-----------" >> {log}')
        search_x(input[0], output[0],
                 params=config['MSA_hhblits']['params'],
                 n_cpu=config['THREADS'],
                 dbs=config['MSA_hhblits']['DB'],
                 log=log[0], hh='hhblits',
                 match_exp='match')

rule MSA_ripe:
    input:
        config['MICROPROT_TEMP']+'/{seq}/04-MSA_hhblits/{seq}'
    output:
        temp(config['MICROPROT_TEMP']+'/{seq}/msa_ripe.{seq}')
    log:
        config['MICROPROT_TEMP']+'/{seq}/{seq}.log'
    run:
        shell('touch {output}')
        indir = snakemake_helpers.trim(input[0], '/')
        for infile in glob('%s/%s' % (indir, '*a3m')):
            inp_name = splitext(basename(infile))[0]
            fasta = re.sub('.a3m', '.fasta', infile)
            msa = calculate_Neff.parse_msa_file(infile)
            hdm = calculate_Neff.hamming_distance_matrix(msa, ignore_sequence_ids=True)
            clu = calculate_Neff.cluster_sequences(hdm,
                                                   config['MSA_ripe']['cutoff'])
            Neff = calculate_Neff.effective_family_size(clu, msa.shape[1])
            _log = re.sub('.log$', '', log[0])
            if Neff >= config['MSA_ripe']['Nf']:
                with open(log[0], 'a') as o:
                    o.write('%s %s %.1f\n' % (inp_name, "ripe:", Neff))
                snakemake_helpers.write_db(fasta, step='%s (%.1f)' %
                                           ("Rosetta", Neff),
                                           version=config['VERSION'],
                                           db_fp=_log)
                dest = re.sub('04-MSA_hhblits', '06-Rosetta', infile)
                dest_dir = snakemake_helpers.trim(dest, '/')
                if not exists(dest_dir):
                    makedirs(dest_dir)
                copyfile(infile, dest)
            else:
                with open(log[0], 'a') as o:
                    o.write('%s %s %.1f\n' % (inp_name, "not ripe:", Neff))
                snakemake_helpers.write_db(fasta, step='%s (%.1f)' %
                                           ("not ripe", Neff),
                                           version=config['VERSION'],
                                           db_fp=_log)
                dest = re.sub('04-MSA_hhblits', '05-not_ripe', infile)
                dest_dir = snakemake_helpers.trim(dest, '/')
                if not exists(dest_dir):
                    makedirs(dest_dir)
                copyfile(infile, dest)


rule organize_files:
    input:
        config['MICROPROT_TEMP']+'/{seq}/msa_ripe.{seq}'
    output:
        temp(config['MICROPROT_TEMP']+'/done.{seq}')
    run:
        shell('touch {output}')
        tempdir = snakemake_helpers.trim(input[0], '/')
        logfiles = re.sub('msa_ripe.', '', input[0])
        # copy index log to logs
        shell('rsync -rz {tempdir}/{wildcards.seq}* \
               {config[MICROPROT_OUT]}/log/')
        # package outputs
        shell('cd {tempdir}; \
              tar -zcf {config[MICROPROT_TEMP]}/{wildcards.seq}.tar.gz \
              [0-1][0-9]-*; \
              rsync {config[MICROPROT_TEMP]}/{wildcards.seq}.tar.gz \
              {config[MICROPROT_OUT]}/pkg/')
        # append DB to MICROPROT_DB (for index and main DB)
        snakemake_helpers.append_db(logfiles, config['MICROPROT_DB'])
        # copy Rosetta
        Rosetta = '%s/%s' % (tempdir, '06-Rosetta/')
        if exists(Rosetta):
            shell('rsync -rzq {Rosetta}* {config[MICROPROT_OUT]}/AB/')
        # copy PDB
        copy_out(source_dir='01-PDB', dest_dir='PDB', tempdir=tempdir)
        # copy CM
        copy_out(source_dir='02-CM', dest_dir='CM', tempdir=tempdir)
        # clean up ONLY WHAT I'VE CREATED
        shell('rm -r {tempdir}; \
               rm -r {config[MICROPROT_TEMP]}/{wildcards.seq}.tar.gz')
