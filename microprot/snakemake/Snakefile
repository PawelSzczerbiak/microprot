# snakemake run example:
# snakemake -j 32 --local-cores 8 --cluster-config cluster.json --cluster \
# "qsub -k eo -m n -l nodes=1:ppn={cluster.n} -l mem={cluster.mem}gb \
# -l walltime={cluster.time}" --directory "$@"

### what happens if we run out of sequence at some point?
### e.g. if the whole sequence hits a PDB record and there is nothing left for subsequent steps?

import os
import skbio
import split_sequence, mask_sequence, calculate_Nf

# load sequence into a sequence object
def read_sequence(fasta_fp):
    seq = skbio.Protein.read(fasta_fp)
    return seq

configfile: "config.yaml"
# pathsfile: '../../paths.yml'


SEQUENCES=config['SEQUENCES']

rule all:
    input:
        expand("results/{seq}/10-Rosetta/{seq}.msa",
               seq=SEQUENCES),
        expand("results/{seq}/03-secondary_predictions/{seq}_{n}.{suffix}",
               seq=SEQUENCES,
               n=['1-100', '101-250', '251-400'],
               suffix=['ss', 'diso', 'tmh'])

rule search_PDB:
    input:
        expand('data/{seq}.fasta',
               seq=SEQUENCES)
    output:
        out='results/{seq}/01-search_pdb/{seq}.out',
        a3m='results/{seq}/01-search_pdb/{seq}.a3m'
    log:
        'results/log/{seq}/search_pdb.log'
    shell:
        '{TOOLS.hhsuite}/bin/hhsearch -i {input} {search_PDB.params} \
        -d {DBS.pdb100} \
        -o {output.out} \
        -oa3m {output.a3m}'

rule split_PDB:
    input:
        'results/{seq}/01-search_pdb/{seq}.out'
    output:
        'results/{seq}/02-split_pdb/{seq}.split_pdb',
    log:
        'results/log/{seq}/split_pdb.log'
    run:
        mask_sequence({input}, {output}, {split_PDB.params})

rule PSIBLAST_PSSM:
    input:
        split='results/{seq}/02-split_pdb/{seq}.split_pdb',
        seq='data/{seq}.fasta'
    output:
        dynamic('results/{seq}/03-secondary_predictions/{seq}_{n}.chk')
    log:
        'results/log/{seq}/psiblast_pssm.log'
    run:
        for d_boundaries, domain in split_sequence({input.seq}, {input.split}):
            n = str(d_boundaries[0])+"-"+str(d_boundaries[1])
            shell('python {SCRIPTS}/psiblast.py -i {domain} -o {output}{n}')

# run secondary structure, disorder and TMH predictions on output from `PSIBLAST_PSSM`
rule PSIBLAST_predictions:
    input:
        dynamic('results/{seq}/03-secondary_predictions/{seq}_{n}.chk')
    output:
        ss=dynamic('results/{seq}/03-secondary_predictions/{seq}_{n}.ss'),
        diso=dynamic('results/{seq}/03-secondary_predictions/{seq}_{n}.diso'),
        tm=dynamic('results/{seq}/03-secondary_predictions/{seq}_{n}.tmh')
    log:
        'results/log/{seq}/psiblast_predictions.log'
    shell:
        'python {SCRIPTS}/secondary_preds.py -i {input} \
                                             -out_ss {output.ss} \
                                             -out_diso {output.diso} \
                                             -out_tmh {output.tm}'

rule search_CM:
    input:
        split='results/{seq}/02-split_pdb/{seq}.split_pdb',
        seq='data/{seq}.fasta'
    output:
        out=dynamic('results/{seq}/04-search_CM/{seq}_{n}.out'),
        a3m=dynamic('results/{seq}/04-search_CM/{seq}_{n}.a3m')
    log:
        'results/log/{seq}/search_cm.log'
    run:
        for d_boundaries, domain in split_sequence({input.seq}, {input.split}):
            n = str(d_boundaries[0])+"-"+str(d_boundaries[1])
            shell('{TOOLS.hhsuite}/bin/hhsearch -i {domain} {search_CM.params} \
                   -d {DBS.pdb100} \
                   -o {output.out}{n} \
                   -oa3m {output.a3m}{n}')

rule split_CM:
    input:
        dynamic('results/{seq}/04-search_CM/{seq}_{n}.out')
    output:
        'results/{seq}/05-split_CM/{seq}.split_cm',
    log:
        'results/log/{seq}.split_cm.log'
    run:
        mask_sequence({input}, {output}, {split_CM.params})

rule search_Pfam:
    input:
        split='results/{seq}/05-split_CM/{seq}.split_cm',
        seq='data/{seq}.fasta'
    output:
        out=dynamic('results/{seq}/06-search_Pfam/{seq}_{n}.out'),
        a3m=dynamic('results/{seq}/06-search_Pfam/{seq}_{n}.a3m')
    log:
        'results/log/{seq}/search_pfam.log'
    run:
        for d_boundaries, domain in split_sequence({input.seq}, {input.split}):
            n = str(d_boundaries[0])+"-"+str(d_boundaries[1])
            shell('{TOOLS.hhsuite}/bin/hhsearch -i {domain} {search_Pfam.params} \
                   -d {DBS.pfamA} \
                   -o {output.out}{n} \
                   -oa3m {output.a3m}{n}')

rule split_Pfam:
    input:
        dynamic('results/{seq}/06-search_Pfam/{seq}_{n}.out')
    output:
        'results/{seq}/07-split_Pfam/{seq}.split_pfam'
    log:
        'results/log/{seq}.split_pfam.log'
    run:
        mask_sequence({input}, {output}, {split_Pfam.params})

rule MSA_hhblits:
    input:
        split='results/{seq}/07-split_Pfam/{seq}.split_pfam',
        seq='data/{seq}.fasta'
    output:
        out=dynamic('results/{seq}/08-MSA_hhblits/{seq}_{n}.out'),
        a3m=dynamic('results/{seq}/08-MSA_hhblits/{seq}_{n}.a3m')
    log:
        'results/log/{seq}.msa_hhblits.log'
    shell:
        for d_boundaries, domain in split_sequence({input.seq}, {input.split}):
            n = str(d_boundaries[0])+"-"+str(d_boundaries[1])
            shell('{TOOLS.hhsuite}/bin/hhblits -i {domain} {MSA_hhblits.params} \
                   -d {DBS.hhblits_db} \
                   -o {output.out}{n} \
                   -oa3m {output.a3m}{n}')

rule MSA_ripe:
    input:
        out=dynamic('results/{seq}/08-MSA_hhblits/{seq}_{n}.out'),
        a3m=dynamic('results/{seq}/08-MSA_hhblits/{seq}_{n}.a3m')
    output:
        not_ripe=dynamic('results/{seq}/09-not_ripe/{seq}.msa'),
        ripe=dynamic('results/{seq}/10-Rosetta/{seq}.msa')
    # calculate Nf
    run:
        calculate_Nf(input.out, input.a3m, output.ripe, output.not_ripe)
