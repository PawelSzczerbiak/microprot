# snakemake run example:
# snakemake -j 32 --local-cores 8 --cluster-config cluster.json --cluster \
# "qsub -k eo -m n -l nodes=1:ppn={cluster.n} -l mem={cluster.mem}gb \
# -l walltime={cluster.time}" --directory "$@"


import os
# import yaml
#
# with open(paths_fp, 'r') as f:
#     paths = yaml.load(f)
configfile: "../../paths.yml"

rule all:
    inputs:
        outputs

rule search_PDB:
    input:
        expand('data/input/{seq}.fasta', seq=SEQUENCES)
    output:
        'results/01-search_pdb/{seq}.out'
    log:
        'results/log/{seq}.search_pdb.log'
    shell:
        '{TOOLS.hhsuite}/bin/hhsearch -i {input} {search_PDB.params} -d {DBS.pdb100} -o {output}'

rule split_PDB:
    input:
        'results/01-search_pdb/{seq}.out'
    output:
        'results/02-split_pdb/'
    log:
        'results/log/{seq}.split_pdb.log'
    shell:
        'python {SCRIPTS}/pdb_search.py -i {input} -o {output}.pdb -o2 {output}{seq}.non_pdb'

rule PSIBLAST_PSSM:
    input:
        'results/02-split_pdb/{seq}.non_pdb'
    output:
        'results/03-secondary_predictions/{seq}.chk'
    log:
        'results/log/{seq}.psiblast_pssm.log'
    shell:
        'python {SCRIPTS}/psiblast.py -i {input} -o {output}'

# run secondary structure, disorder and TMH predictions on output from `PSIBLAST_PSSM`
rule PSIBLAST_predictions:
    input:
        'results/03-secondary_predictions/{seq}.chk'
    output:
        'results/03-secondary_predictions/'
    log:
        'results/log/{seq}.psiblast_predictions.log'
    shell:
        'python {SCRIPTS}/secondary_preds.py -i {input} -o {output}'

rule search_CM:
    input:
        'results/02-split_pdb/{seq}.non_pdb'
    output:
        'results/04-search_CM/{seq}'
    log:
        'results/log/{seq}.search_cm.log'
    shell:
        '{TOOLS.hhsuite}/bin/hhsearch -i {input} {search_CM.params} \
        -d {DBS.pdb100} \
        -o {output}.out \
        -oa3m {output}.a3m'

rule split_CM:
    input:
        'results/04-search_CM/{seq}.out'
    output:
        'results/05-split_CM/'
    log:
        'results/log/{seq}.split_cm.log'
    shell:
        'python {SCRIPTS}/pdb_search.py -i {input} -o {output}.cm -o2 {output}{seq}.fm'

rule search_Pfam:
    input:
        'results/05-split_CM/{seq}.fm'
    output:
        'results/06-search_Pfam/{seq}'
    log:
        'results/log/{seq}.search_pfam.log'
    shell:
        '{TOOLS.hhsuite}/bin/hhsearch -i {input} {search_Pfam.params} \
        -d {DBS.pfamA} \
        -o {output}.out \
        -oa3m {output}.a3m'

rule split_Pfam:
    input:
        'results/06-search_Pfam/{seq}.out'
    output:
        'results/07-split_Pfam/'
    log:
        'results/log/{seq}.split_pfam.log'
    shell:
        'python {SCRIPTS}/pdb_search.py -i {input} -o {output}'

rule MSA_hhblits:
    input:
        'results/07-split_Pfam/{seq}.*'
    output:
        'results/08-MSA_hhblits/'
    log:
        'results/log/{seq}.msa_hhblits.log'
    shell:
        '{TOOLS.hhsuite}/bin/hhblits -i {input} {MSA_hhblits.params} \
        -d {DBS.hhblits_db} \
        -o {output}.out \
        -oa3m {output}.a3m'

rule MSA_ripe:
    input:
        'results/08-MSA_hhblits/{seq}.a3m'
    output:
        not_ripe='results/09-not_ripe/{seq}.msa',
        ripe='results/10-Rosetta/{seq}.msa'
    # calculate Nf
    shell:
        'python {SCRIPTS}/calculate_Nf.py -i {input} \
        -O {output.ripe} \
        -o {output.not_ripe}'
