# snakemake run example:
# snakemake -j 32 --local-cores 8 --cluster-config cluster.json --cluster \
# "qsub -k eo -m n -l nodes=1:ppn={cluster.n} -l mem={cluster.mem}gb \
# -l walltime={cluster.time}" --directory "$@"

### what happens if we run out of sequence at some point?
### e.g. if the whole sequence hits a PDB record and there is nothing left for subsequent steps?

import os

configfile: "config.yaml"
# pathsfile: '../../paths.yml'


SEQUENCES=config['SEQUENCES']

rule all:
    input:
        expand("results/{seq}/10-Rosetta/{seq}.msa",
               seq=SEQUENCES)

rule search_PDB_dynamic:
    input:
        expand('data/{seq}.fasta',
               seq=SEQUENCES)
    output:
        out='results/{seq}/01-search_pdb/{seq}.out',
        a3m='results/{seq}/01-search_pdb/{seq}.a3m'
    log:
        'results/log/{seq}/search_pdb.log'
    shell:
        '{TOOLS.hhsuite}/bin/hhsearch -i {input} {search_PDB.params} \
        -d {DBS.pdb100} \
        -o {output.out} \
        -oa3m {output.a3m}'

rule split_PDB_block:
    input:
        'results/{seq}/01-search_pdb/{seq}.out'
    output:
        pdb=dynamic('results/{seq}/02-split_pdb/pdb.done,
        non_pdb='results/{seq}/02-split_pdb/pdb.done'
    log:
        'results/log/{seq}/split_pdb.log'
    shell:
        'python {SCRIPTS}/split_sequence.py -i {input} {split_PDB.params}\
        -o {output.pdb} \
        -o2 {output.non_pdb}

        touch {output.pdb}
        touch {output.non_pdb}'

rule downstream_block:
    input:
        'results/{seq}/02-split_pdb/done.non_pdb'
    output:
        out='results/{seq}/04-search_CM/done.downstream',
        a3m='results/{seq}/04-search_CM/{seq}.a3m'
    log:
        'results/log/{seq}/search_cm.log'
    run:
        for file in basedir(input):
            do this thing

        touch done.downstream
        '{TOOLS.hhsuite}/bin/hhsearch -i {input} {search_CM.params} \
        -d {DBS.pdb100} \
        -o {output.out} \
        -oa3m {output.a3m}'


rule split_PDB:
    input:
        'results/{seq}/01-search_pdb/{seq}.out'
    output:
        pdb=dynamic('results/{seq}/02-split_pdb/{seq}.{n}.pdb'),
        non_pdb='results/{seq}/02-split_pdb/{seq}.non_pdb'
    log:
        'results/log/{seq}/split_pdb.log'
    shell:
        'python {SCRIPTS}/split_sequence.py -i {input} {split_PDB.params}\
        -o {output.pdb} \
        -o2 {output.non_pdb}'

rule split_PDB:
    input:
        'results/{seq}/01-search_pdb/{seq}.out'
    output:
        pdb='results/{seq}/02-split_pdb/{seq}.pdb',
        non_pdb='results/{seq}/02-split_pdb/{seq}.non_pdb'
    log:
        'results/log/{seq}/split_pdb.log'
    shell:
        'python {SCRIPTS}/split_sequence.py -i {input} {split_PDB.params}\
        -o {output.pdb} \
        -o2 {output.non_pdb}'

rule PSIBLAST_PSSM:
    input:
        'results/{seq}/02-split_pdb/{seq}.non_pdb'
    output:
        'results/{seq}/03-secondary_predictions/{seq}.chk'
    log:
        'results/log/{seq}/psiblast_pssm.log'
    shell:
        'python {SCRIPTS}/psiblast.py -i {input} -o {output}'

# run secondary structure, disorder and TMH predictions on output from `PSIBLAST_PSSM`
rule PSIBLAST_predictions:
    input:
        'results/{seq}/03-secondary_predictions/{seq}.chk'
    output:
        ss='results/{seq}/03-secondary_predictions/{seq}.ss',
        disorder='results/{seq}/03-secondary_predictions/{seq}.diso',
        tm='results/{seq}/03-secondary_predictions/{seq}.tmh'
    log:
        'results/log/{seq}/psiblast_predictions.log'
    shell:
        'python {SCRIPTS}/secondary_preds.py -i {input} \
                                             -out_ss {output.ss} \
                                             -out_diso {output.disorder} \
                                             -out_tmh {output.tm}'

rule search_CM:
    input:
        'results/{seq}/02-split_pdb/{seq}.non_pdb'
    output:
        out='results/{seq}/04-search_CM/{seq}.out',
        a3m='results/{seq}/04-search_CM/{seq}.a3m'
    log:
        'results/log/{seq}/search_cm.log'
    shell:
        '{TOOLS.hhsuite}/bin/hhsearch -i {input} {search_CM.params} \
        -d {DBS.pdb100} \
        -o {output.out} \
        -oa3m {output.a3m}'

rule split_CM:
    input:
        'results/{seq}/04-search_CM/{seq}.out'
    output:
        cm='results/{seq}/05-split_CM/{seq}.cm',
        fm='results/{seq}/05-split_CM/{seq}.fm'
    log:
        'results/log/{seq}.split_cm.log'
    shell:
        'python {SCRIPTS}/split_sequence.py -i {input} {split_CM.params}\
        -o {output.cm} \
        -o2 {output.fm}'

rule search_Pfam:
    input:
        'results/{seq}/05-split_CM/{seq}.fm'
    output:
        out='results/{seq}/06-search_Pfam/{seq}.out',
        a3m='results/{seq}/06-search_Pfam/{seq}.a3m'
    log:
        'results/log/{seq}/search_pfam.log'
    shell:
        '{TOOLS.hhsuite}/bin/hhsearch -i {input} {search_Pfam.params} \
        -d {DBS.pfamA} \
        -o {output.out} \
        -oa3m {output.a3m}'

rule split_Pfam:
    input:
        'results/{seq}/06-search_Pfam/{seq}.out'
    output:
        'results/{seq}/07-split_Pfam/{seq}'
    log:
        'results/log/{seq}.split_pfam.log'
    shell:
        'python {SCRIPTS}/split_sequence.py -i {input} {split_Pfam.params} \
        -o {output}'

rule MSA_hhblits:
    input:
        'results/{seq}/07-split_Pfam/{seq}'
    output:
        out='results/{seq}/08-MSA_hhblits/{seq}.out',
        a3m='results/{seq}/08-MSA_hhblits/{seq}.a3m'
    log:
        'results/log/{seq}.msa_hhblits.log'
    shell:
        '{TOOLS.hhsuite}/bin/hhblits -i {input} {MSA_hhblits.params} \
                                     -d {DBS.hhblits_db} \
                                     -o {output.out} \
                                     -oa3m {output.a3m}'

rule MSA_ripe:
    input:
        'results/{seq}/08-MSA_hhblits/{seq}.out'
    output:
        not_ripe='results/{seq}/09-not_ripe/{seq}.msa',
        ripe='results/{seq}/10-Rosetta/{seq}.msa'
    # calculate Nf
    shell:
        'python {SCRIPTS}/calculate_Nf.py -i {input} \
        -O {output.ripe} \
        -o {output.not_ripe}'
